function updateRecords(id, prop, value) {
  if (value === '') {
    delete collection[id][prop];
  } else if (prop !== 'tracks') {
    collection[id][prop] = value;
  } else {
    if (!collection[id].hasOwnProperty(prop)) {
      collection [id][prop]= [];
      collection[id][prop].push(value);
    } else {
      collection[id][prop].push(value);
    }
  }
  return collection;
}

var myIndex = -1;
  for (var i = 0; i < contacts.length; i++) {
    if (contacts[i].firstName === firstName) {
      myIndex = i;
      break;
    }
  }
  
  if (myIndex == -1) {
    return "No such contact";
  } else if (contacts[myIndex].hasOwnProperty(prop) === false) {
    return "No such property";
  } else {
    return contacts[lookUpIndex][prop];
  }
  function randomFraction() 
  Math.random(2/4);
  return 0.2;

  function randomWholeNum() { 

  return Math.floor(Math.random()*10);
}

function randomRange(myMin, myMax) {
return Math.floor(Math.random() * (myMax - myMin + 1)) +myMin;
}
var testString = "there are 6 words in 7 arrays";
var expression = /\d+/g;
var digiCount = testString.match(expression).length;

var testString = "how many white spaces are in this statement";
var expression = /\s+/g;
var whiteSpace = testString.match(expression).length;

var testString = "count number of non white spaces on this string";
var expression = /\S/g;
var nonWhiteSpace = testString.match(expression).length;

var motorBike = {
"wheels":2,
  "engines":1,
  "seats":3
};

var MotorBike = function() {
this.wheels = 2;
  this.engines = 1;
  this.seats = 3;
};


var Car = function() {
  this.wheels = 4;
  this.engines = 1;
  this.seats = 5;

};

var myCar = new Car();
 myCar.nickname = "monster";

var Car = function(wheels,seats,engines) {
  //Change this constructor
  this.wheels = wheels;
  this.seats = seats;
  this.engines = engines;
};
var myCar = new Car(4, 5, 1);


var Bike = function() {

var gear=0;
  this.setGear = function(change) {
 gear = change;
  };
  this.getGear = function(){
    return gear;
  };
};

var oldArray = [1,2,3,4,5];

var newArray = oldArray.map(function(val) {
                            return val + 3 ;
                            });

var array = [4,5,6,7,8];
var singleVal = 0;
var singleVal =array.reduce(function(previousVal,singleVal) {
  return previousVal - singleVal;
},30);
singleVal = 30;

var oldArray = [1,2,3,4,5,6,7,8,9,10];
oldArray = oldArray.filter(function(val) {
  return val < 8;
});
var newArray = [1,2,3,4,5,6,7];
var oldArray = [1,2,3,4,5,6,7,8,9,10];

var array = [1, 12, 21, 2];

array.sort(function(a,b) {
  return b - a;
});

var array = [1,2,3,4,5,6,7];
var newArray = [];
array.reverse();
newArray = [7,6,5,4,3,2,1];


var oldArray = [1,2,3];
var newArray = [];

var concatMe = [4,5,6];
newArray = oldArray.concat(concatMe);
newArray = [1,2,3,4,5,6];


var string = "Split me into an array";
var array = [];
var string = string.split('s');
array = ['split', 'me', 'into', 'an', 'array'];


functon reverseString (str){
  var splitString = str.split('');
  var reverseString = splitString.reverse();
  var joinArray = reverseString.join('')
return joinArray
reverseString(jubilee)
}

function factorialize(num){
  if (num < 0){
    return zero;
  }else if (num===0){
    return 1;
  }for (i = num - 1; i >=1; 
num = num * i ; 
  }
  return num;
}

function palindromes(str){
  var rem = /[Ã‚-^Z a-z 0-9 ('')]/g;
  str = str.toLowerCase().replace(rem);
  var len = str.length ;
  for (i=o; i < len; i++){
    if (str[i] !== str [len]){
      return false;
    }
  }
}

function findLongestWord (str){
var longestWord = str.split('');
var findLongestWord = longestWord.length
}

function titleCase (str){
return str  toLowerCase().split('');
var word = str.toUppercase().str.slice(1);
var titleCase = str.join('');
return str.join('');
}

function largestOfFour(arr){
  var largestOfFour = [];
  for (var arr.index = 0; arr.index < arr.length; arr.index++);
  for (var subArrindex=0; subArrindex <subArr.length; subArr++);
  if (arr[arrIndex][subArrindex] > largestOfFour{arrIndex}){
    largestOfFour = [arrIndex][subArrindex];
  }
  return largestOfFour
}





